import random
from nltk import word_tokenize, edit_distance
from pydub import AudioSegment
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from pyaspeller import YandexSpeller
from pymystem3 import Mystem
from telegram import ReplyKeyboardMarkup, KeyboardButton, Bot, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import speech_recognition as sr
import logging.config
from telegram.utils.request import Request
from Config import BOT_CONFIG

TG_TOKEN = "1318466039:AAEW3iVZehtjCSB4BBcuB3jPsYb6XRgiPYE"
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.fileConfig('logging.conf')
logger = logging.getLogger("Your_assistant")

stats = {'intent': 0, 'generative': 0, 'stub': 0}


# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
def correct_spelling(text):
    speller = YandexSpeller()
    changes = {change['word']: change['s'][0] for change in speller.spell(text)}
    for word, suggestion in changes.items():
        text = text.replace(word, suggestion)
    return text


# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ
def form_of_word(text):
    m3 = Mystem()
    text = ''.join(m3.lemmatize(text))
    return text


# –î–∞—Ç–∞—Å–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
with open('dialogues.txt', encoding='utf-8') as f:
    content = f.read()

dialogues = []  # [[Q, A], ...]

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
for dialogue_text in content.split('\n\n'):
    replicas = dialogue_text.split('\n')
    if len(replicas) >= 2:
        # –ë–µ—Ä—É—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –¥–≤–µ —Ä–µ–ø–ª–∏–∫–∏
        replicas = replicas[:2]
        # –£–±–∏—Ä–∞—é—Ç—Å—è " -" –≤ –Ω–∞—á–∞–æ–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
        replicas = [replica[2:] for replica in replicas]
        replicas[0] = replicas[0].lower().strip()
        replicas[0] = form_of_word(replicas[0])
        if replicas[0]:
            dialogues.append(tuple(replicas))

# –ò–∑–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤
dialogues = list(set(dialogues))

qa_dataset = {}

# –†–∞–∑–±–∏–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å —Ç–æ–∫–µ–Ω–æ–≤(—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü), –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–∏ - —ç—Ç–æ —Å–ª–æ–≤–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏—è - —ç—Ç–æ –¥–∏–∞–ª–æ–≥–∏,
# —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–∏ —Å–ª–æ–≤–∞ –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É—Å–∫–æ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
alphabet = '–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—ë—è—á—Å–º–∏—Ç—å–±—é'
for question, answer in dialogues:
    tokens = word_tokenize(question)
    words = [token for token in tokens if any(char in token for char in alphabet)]
    for word in words:
        if word not in qa_dataset:
            qa_dataset[word] = []
        qa_dataset[word].append((question, answer))

dataset = []  # [[x, y], [example, intent], ...]

for intent, intent_data in BOT_CONFIG['intents'].items():
    for example in intent_data['examples']:
        dataset.append([example, intent])

X_text = [x for x, y in dataset]
y = [y for x, y in dataset]

# –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(X_text)

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
clf = LogisticRegression()
clf.fit(X, y)


# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π
def get_intent(text):
    logger.info("Rules")
    vector = vectorizer.transform([text])
    winner = clf.predict(vector)[0]
    index = list(clf.classes_).index(winner)
    proba = clf.predict_proba(vector)[0][index]
    if proba > 0.3:
        return winner


# –í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞
def get_response_by_intent(intent):
    candidates = BOT_CONFIG['intents'][intent]['responses']
    return random.choice(candidates)


# –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å
def generate_answer(text):
    logger.info("Generate model")
    text = text.lower()
    text = form_of_word(text)
    tokens = word_tokenize(text)
    words = [token for token in tokens if any(char in token for char in alphabet)]
    for word in words:
        if word in qa_dataset:
            for question, answer in qa_dataset[word]:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ(–≤–æ–ø—Ä–æ—Å) –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ø–æ –¥–ª–∏–Ω–µ, —Ç–æ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–∏–º–µ–Ω—è—Ç—å
                # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
                if abs(len(text) - len(question)) / len(question) < 0.2:
                    # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
                    distance = edit_distance(text, question)
                    if distance / len(question) < 0.2:
                        return answer


# –ó–∞–≥–ª—É—à–∫–∞
def get_default_response():
    logger.info("Default answer")
    candidates = BOT_CONFIG['failure_phrases']
    return random.choice(candidates)


# –§—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è —Å–ø–æ—Å–æ–± –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_answer(text):
    # NLU
    intent = get_intent(text)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞

    # –ü—Ä–∞–≤–∏–ª–∞
    if intent:
        stats['intent'] += 1
        return get_response_by_intent(intent)

    # –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å
    response = generate_answer(text)
    if response:
        stats['generative'] += 1
        return response

    # –ó–∞–≥–ª—É—à–∫–∞
    stats['stub'] += 1
    return get_default_response()


# –ö–æ–º–∞–Ω–¥–∞ /help –∏ /start –¥–ª—è –±–æ—Ç–∞
def user_help(bot: Bot, update: Update):
    update.message.reply_text('  –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!üëã\n' +
                              '  –¢–µ–º–∞—Ç–∏–∫–∞ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:\n'
                              '‚Ä£ –Ω–æ—Ä–º–∫–æ–Ω—Ç—Ä–æ–ª—å (—á—Ç–æ –∏–∑ —Å–µ–±—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –ø—Ä–∏ —Å–µ–±–µ);\n'
                              '‚Ä£ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –ø–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∫–∏ (—Ç–∏—Ç—É–ª—å–Ω—ã–π –ª–∏—Å—Ç, –∑–∞–¥–∞–Ω–∏–µ –∫ –í–ö–†, –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è, '
                              '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, —Å–∞–º–∞ —Ä–∞–±–æ—Ç–∞, —Å–ø–∏—Å–∫–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è), –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–¥–ø–∏—Å–∏;\n'
                              '‚Ä£ –∫–æ–º–ø–∞–∫—Ç-–¥–∏—Å–∫–∏ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫);\n'
                              '‚Ä£ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å –∏ —Ä–∞–∑–¥–∞—Ç–æ—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª (—á—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ '
                              '–ø–æ–¥–ø–∏—Å–∏);\n'
                              '‚Ä£ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç (–≤ —á—ë–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è, —Å–ø—Ä–∞–≤–∫–∞ –æ–± –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç–µ);\n'
                              '‚Ä£ –æ—Ç–∑—ã–≤ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (–∫–µ–º —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è);\n'
                              '‚Ä£ —Ä–µ—Ü–µ–Ω–∑–∏—è (–∫–µ–º –≥–æ—Ç–æ–≤–∏—Ç—Å—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–¥–ø–∏—Å–∏ –∏ –ø–µ—á–∞—Ç–∏);\n'
                              '‚Ä£ —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–æ—Ä–º–∫–æ–Ω—Ç—Ä–æ–ª—è.\n'
                              '–ó–∞–¥–∞–≤–∞–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å—ã.üòâ', reply_markup=reply_markup_help(), )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π /help
def reply_markup_help():
    reply_markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="/help"),
            ],
        ],
        resize_keyboard=True
    )
    return reply_markup


def bot_answer(bot: Bot, update: Update, text):
    text = correct_spelling(text)
    answer = get_answer(text)
    count = sum(stats.values())
    print(f'Question: {update.message.text}  Answer: {answer}')
    print(f'{stats["intent"] / count * 100:.2f} intent, '
          f'{stats["generative"] / count * 100:.2f} generative, '
          f'{stats["stub"] / count * 100:.2f} stub, '
          f'count={count}')
    print()
    update.message.reply_text(answer, reply_markup=reply_markup_help(), )
    # with open('Dataset.txt', 'rb') as file:
    #    bot.send_document(update.message.chat_id, file)


# –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def text_message(bot: Bot, update: Update):
    bot_answer(bot, update, update.message.text)


# –û—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def audio_message(bot: Bot, update: Update):
    recognizer = sr.Recognizer()
    fileID = update.message.voice.file_id
    file = bot.get_file(fileID)
    file.download('audio.ogg')
    sound = AudioSegment.from_ogg('audio.ogg')
    sound.export('audio.wav', format="wav")
    try:
        with sr.WavFile('audio.wav') as source:
            audio = recognizer.record(source)
            text = recognizer.recognize_google(audio, language='ru_RU').lower()
        bot_answer(bot, update, text)
    except sr.UnknownValueError:
        update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª —á—Ç–æ –≤—ã —Å–∫–∞–∑–∞–ª–∏.')


def main():
    logger.info("Launch chat bot")
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    req = Request(
        connect_timeout=0.5,
    )
    bot = Bot(
        token=TG_TOKEN,
        request=req,
    )
    updater = Updater(
        bot=bot,
        use_context=False
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Telegram API
    info = bot.get_me()
    logger.info(f'Bot info: {info}')

    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", user_help))
    dp.add_handler(CommandHandler("help", user_help))
    dp.add_handler(MessageHandler(Filters.voice & ~Filters.command, audio_message))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, text_message))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
