import csv
from datetime import timedelta
from pydub import AudioSegment
from telegram import ReplyKeyboardMarkup, KeyboardButton, Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
import speech_recognition as sr
import logging.config
from telegram.utils.request import Request
from Models import get_intent, get_response_by_intent, get_default_response, generate_answer, correct_spelling

TG_TOKEN = "1318466039:AAEW3iVZehtjCSB4BBcuB3jPsYb6XRgiPYE"
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.fileConfig('logging.conf')
logger = logging.getLogger("Your_assistant")

# –ö–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É
count = 0
# –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
standards = {'–ø—Ä–æ–≤–µ—Ä–∫–∞ –í–ö–†': ['./standards/–ø–æ–ª–æ–∂–µ–Ω–∏–µ_–æ_–ø–æ—Ä—è–¥–∫–µ_–ø—Ä–æ–≤–µ—Ä–∫–∏.pdf',
                              ' –ü–æ–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø—É—Å–∫–Ω—ã—Ö –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.'],
             '–≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏': ['./standards/–ø–æ–ª–æ–∂–µ–Ω–∏–µ_–ø–æ_–≤–∏–¥—É_–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.pdf',
                                  ' –ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤–∏–¥—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ –≤—ã–ø—É—Å–∫–Ω–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ.'],
             '—Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã': ['./standards/—Å–ø–∏—Å–æ–∫_–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.pdf',
                                   ' –û–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.']}
# –§–∞–π–ª—ã —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
commands = {'mistakes': './commands/mistakes.txt',
            'need': './commands/need.txt',
            'help(start)': './commands/help(start).txt',
            'help(start)_commands': './commands/help(start)_commands.txt'}
button = {'need': '–ß–µ–∫-–ª–∏—Å—Ç', 'mistakes': '–û—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏'}
statistics = {'requests': './reports/requests.csv'}
# –°–ø–∏—Å–æ–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
data = {}
# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
LITERATURE_BUTTON = "literature"
ORDER_NORMCONTROL_BUTTON = "order_normcontrol"
TYPE_NORMCONTROL_BUTTON = "type_normcontrol"
TITLES = {
    LITERATURE_BUTTON: "–ü—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã",
    ORDER_NORMCONTROL_BUTTON: "–ü–æ–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏",
    TYPE_NORMCONTROL_BUTTON: "–ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤–∏–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∏",
}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –æ—Ç–≤–µ—Ç–æ–º –±–æ—Ç–∞
# –¢–µ–º–∞: —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã
def literature_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(TITLES[LITERATURE_BUTTON], callback_data=LITERATURE_BUTTON),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –æ—Ç–≤–µ—Ç–æ–º –±–æ—Ç–∞
# –¢–µ–º–∞: –Ω–æ—Ä–º–∫–æ–Ω—Ç—Ä–æ–ª—å
def normcontrol_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(TITLES[ORDER_NORMCONTROL_BUTTON], callback_data=ORDER_NORMCONTROL_BUTTON),
        ],
        [
            InlineKeyboardButton(TITLES[TYPE_NORMCONTROL_BUTTON], callback_data=TYPE_NORMCONTROL_BUTTON),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ß–µ–∫-–ª–∏—Å—Ç, –û—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏
def reply_markup_help():
    reply_markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ß–µ–∫-–ª–∏—Å—Ç"),
                KeyboardButton(text="–û—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏"),
            ],
        ],
        resize_keyboard=True
    )
    return reply_markup


# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
def choose_keyboard(text):
    if text.find('–°–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã', 0, 18) != -1:
        return literature_keyboard()
    if text.find('–ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å', 0, 14) != -1:
        return normcontrol_keyboard()
    return reply_markup_help()


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
def callback_message(bot: Bot, update: Update):
    global query_data
    try:
        query = update.callback_query
        query_data = query.data
    except Exception as e:
        logger.info('Callback query: ' + str(e))
        update.message.reply_text(text='üòî–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.',
                                  reply_markup=reply_markup_help(), )
    else:
        logging.info('Callback query')
        if query_data == LITERATURE_BUTTON:
            send_document(bot, update, 'literature')
        if query_data == ORDER_NORMCONTROL_BUTTON:
            send_document(bot, update, 'order_normcontrol')
        if query_data == TYPE_NORMCONTROL_BUTTON:
            send_document(bot, update, 'type_normcontrol')


# –§—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è —Å–ø–æ—Å–æ–± –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_answer(text):
    global count
    # NLU
    intent = get_intent(text)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    # –ü—Ä–∞–≤–∏–ª–∞
    if intent:                  
        count += 1
        data['Model'] = 'rules'
        return get_response_by_intent(intent)

    # –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å
    response = generate_answer(text)
    if response:
        count += 1
        data['Model'] = 'generative model'
        return response

    # –ó–∞–≥–ª—É—à–∫–∞
    count += 1
    data['Model'] = 'stub'
    return get_default_response()


# –ö–æ–º–∞–Ω–¥–∞ /help –∏ /start –¥–ª—è –±–æ—Ç–∞
def user_help(bot: Bot, update: Update):
    try:
        with open(commands['help(start)'], 'r', encoding='utf-8') as file:
            update.message.reply_text(text=file.read(), reply_markup=reply_markup_help(), )
        with open(commands['help(start)_commands'], 'r', encoding='utf-8') as file:
            bot.send_message(chat_id=update.message.chat_id, text=file.read(), reply_markup=reply_markup_help(), )
    except Exception as e:
        logger.info('Command help(start): ' + str(e))
        update.message.reply_text(text='üòî–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–µ–∫—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.', reply_markup=reply_markup_help(), )


# –ö–æ–º–∞–Ω–¥–∞ /standards –¥–ª—è –±–æ—Ç–∞
def user_standards(bot: Bot, update: Update):
    logger.info("Sending documents")
    try:
        for value in standards.values():
            with open(value[0], 'rb') as file:
                bot.send_document(chat_id=update.message.chat_id, document=file,
                                  caption=value[1])
    except Exception as e:
        logger.info('Command standards: ' + str(e))
        update.message.reply_text(text='üòî–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–µ–∫—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.', reply_markup=reply_markup_help(), )


# –ö–æ–º–∞–Ω–¥–∞ /mistakes –¥–ª—è –±–æ—Ç–∞
def user_mistakes(bot: Bot, update: Update):
    try:
        with open(commands['mistakes'], 'r', encoding='utf-8') as file:
            update.message.reply_text(text=file.read(), reply_markup=reply_markup_help(), )
    except Exception as e:
        logger.info('Command mistakes: ' + str(e))
        update.message.reply_text(text='üòî–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–µ–∫—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.', reply_markup=reply_markup_help(), )


# –ö–æ–º–∞–Ω–¥–∞ /need –¥–ª—è –±–æ—Ç–∞
def user_need(bot: Bot, update: Update):
    try:
        with open(commands['need'], 'r', encoding='utf8') as file:
            update.message.reply_text(text=file.read(), reply_markup=reply_markup_help(), )
    except Exception as e:
        logger.info('Command need: ' + str(e))
        update.message.reply_text(text='üòî–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–µ–∫—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.', reply_markup=reply_markup_help(), )


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_statistics(data):
    fieldnames = ['Number', 'Chat id', 'Date', 'Type message', 'Question', 'Answer', 'Model']
    try:
        with open(statistics['requests'], "a", encoding='utf-8') as csv_file:
            file_writer = csv.DictWriter(csv_file, delimiter=";", fieldnames=fieldnames, lineterminator="\r")
            file_writer.writerow(data)
    except Exception as e:
        logger.info('Save statistics: ' + str(e))


# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_document(bot: Bot, update: Update, text):
    try:
        if text == 'literature':
            logger.info("Sending document(-s)")
            with open(standards['—Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã'][0], 'rb') as file:
                bot.send_document(chat_id=update.callback_query.message.chat_id, document=file, caption=standards['—Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã'][1])
        if text == 'order_normcontrol':
            logger.info("Sending document(-s)")
            with open(standards['–ø—Ä–æ–≤–µ—Ä–∫–∞ –í–ö–†'][0], 'rb') as file:
                bot.send_document(chat_id=update.callback_query.message.chat_id, document=file, caption=standards['–ø—Ä–æ–≤–µ—Ä–∫–∞ –í–ö–†'][1])
        if text == 'type_normcontrol':
            logger.info("Sending document(-s)")
            with open(standards['–≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'][0], 'rb') as file:
                bot.send_document(chat_id=update.callback_query.message.chat_id, document=file, caption=standards['–≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'][1])
    except Exception as e:
        logger.info('Send document(-s): ' + str(e))
        update.message.reply_text(text='üòî–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.', reply_markup=reply_markup_help(), )


def bot_answer(bot: Bot, update: Update, text):
    text = correct_spelling(text)
    answer = get_answer(text)
    data['Number'] = count
    data['Chat id'] = str(update.message.from_user.id)
    data['Date'] = str(update.message.date + timedelta(hours=3))
    data['Question'] = text
    data['Answer'] = answer
    save_statistics(data)
    update.message.reply_text(answer, reply_markup=choose_keyboard(answer), )


# –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def text_message(bot: Bot, update: Update):
    data['Type message'] = 'text'
    text = update.message.text
    if text == button['need']:
        user_need(bot, update)
    elif text == button['mistakes']:
        user_mistakes(bot, update)
    else:
        bot_answer(bot, update, text)


# –û—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def audio_message(bot: Bot, update: Update):
    data['Type message'] = 'audio'
    try:
        recognizer = sr.Recognizer()
        fileID = update.message.voice.file_id
        file = bot.get_file(fileID)
        file.download('audio.ogg')
        sound = AudioSegment.from_ogg('audio.ogg')
        sound.export('audio.wav', format="wav")
        try:
            with sr.WavFile('audio.wav') as source:
                audio = recognizer.record(source)
                text = recognizer.recognize_google(audio, language='ru_RU').lower()
                bot_answer(bot, update, text)
        except sr.UnknownValueError:
            update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª —á—Ç–æ –≤—ã —Å–∫–∞–∑–∞–ª–∏.')
    except Exception as e:
        logger.info('Audio message: ' + str(e))
        update.message.reply_text(text='üòî–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.', reply_markup=reply_markup_help(), )


def main():
    logger.info("Launch chat bot")
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    req = Request(
        connect_timeout=0.5,
    )
    bot = Bot(
        token=TG_TOKEN,
        request=req,
    )
    updater = Updater(
        bot=bot,
        use_context=False
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Telegram API
    info = bot.get_me()
    logger.info(f'Bot info: {info}')

    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", user_help))
    dp.add_handler(CommandHandler("help", user_help))
    dp.add_handler(CommandHandler("standards", user_standards))
    dp.add_handler(CommandHandler("mistakes", user_mistakes))
    dp.add_handler(CommandHandler("need", user_need))
    dp.add_handler(MessageHandler(Filters.voice & ~Filters.command, audio_message))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, text_message))
    dp.add_handler(CallbackQueryHandler(callback=callback_message))
    # dp.add_handler(MessageHandler(Filters.status_update.new_chat_members, user_help))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
